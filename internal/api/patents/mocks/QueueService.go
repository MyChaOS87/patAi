// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	entities "github.com/MyChaOS87/patAi/internal/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// QueueService is an autogenerated mock type for the QueueService type
type QueueService struct {
	mock.Mock
}

// EnqueueJob provides a mock function with given fields: ownerID, content
func (_m *QueueService) EnqueueJob(ownerID string, content string) (entities.EvaluationJob, error) {
	ret := _m.Called(ownerID, content)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueJob")
	}

	var r0 entities.EvaluationJob
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entities.EvaluationJob, error)); ok {
		return rf(ownerID, content)
	}
	if rf, ok := ret.Get(0).(func(string, string) entities.EvaluationJob); ok {
		r0 = rf(ownerID, content)
	} else {
		r0 = ret.Get(0).(entities.EvaluationJob)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(ownerID, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobByID provides a mock function with given fields: id
func (_m *QueueService) GetJobByID(id uuid.UUID) (entities.EvaluationJob, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetJobByID")
	}

	var r0 entities.EvaluationJob
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (entities.EvaluationJob, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) entities.EvaluationJob); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.EvaluationJob)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobsByOwnerID provides a mock function with given fields: ownerID
func (_m *QueueService) GetJobsByOwnerID(ownerID string) ([]entities.EvaluationJob, error) {
	ret := _m.Called(ownerID)

	if len(ret) == 0 {
		panic("no return value specified for GetJobsByOwnerID")
	}

	var r0 []entities.EvaluationJob
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entities.EvaluationJob, error)); ok {
		return rf(ownerID)
	}
	if rf, ok := ret.Get(0).(func(string) []entities.EvaluationJob); ok {
		r0 = rf(ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.EvaluationJob)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQueueService creates a new instance of QueueService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueService(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueService {
	mock := &QueueService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
